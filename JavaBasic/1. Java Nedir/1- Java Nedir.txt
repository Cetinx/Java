                                        Neden Java ?
1) Nedir Java ?

James Gosling Java projesini Haziran 1991'de başlattı.

Java ilk çıktığında daha çok küçük cihazlarda kullanılmak için tasarlanmış 
ortak bir düzlem dili olarak düşünülmüştü.

Java'nın ilk sürümü olan Java 1.0 (1995) Java Platform 1 olarak adlandırıldı 
ve tasarlama amacına uygun olarak küçük boyutlu ve kısıtlı özelliklere sahipti. 
Daha sonra düzlemin gücü gözlendi ve tasarımında büyük değişiklikler ve eklemeler yapıldı. 
Bu büyük değişikliklerden dolayı geliştirilen yeni düzleme Java Platform 2 adı verildi
ama sürüm numarası 2 yapılmadı, 1.2 olarak devam etti. 
2004 sonbaharında çıkan Java 5, 
geçmiş 1.2, 1.3 ve 1.4 sürümlerinin ardından en çok gelişme ve değişikliği barındıran sürüm oldu.
Java SE 8 ise Java teknolojisinin günümüz sürümüdür.
13 Kasım 2006'da Java düzlemi GPL ruhsatıyla açık kodlu hale gelmiştir

Ancak düzlem bağımsızlığı. Java'nın sık kullanılan sloganlarından biri olan,
"bir defa yaz, her yerde çalıştır". Windos da linux da mac de çalışması , 
yani platform bagımsız özelliği ve tekbiçim kütüphane desteği 
C ve C++'tan çok daha üstün ve güvenli bir yazılım geliştirme 
ve işletme ortamı sunduğundan, hemen her yerde kullanılmaya başlanmıştır. 
Özellikle kurumsal alanda ve mobil cihazlarda son derece popüler 
olan Java özellikle J2SE 1.4 ve 5 sürümü ile masaüstü uygulamalarda da 
yaygınlaşmaya başlamıştır.

Java'nın ilk hali Oak ismini taşıyordu ve bu isimi Gosling'in ofisinin hemen 
yanında bulunan bir meşe ağacından almıştı. 
Daha sonra projenin ismi Green oldu ve en son Java adını aldı.

Gosling, Java'yı C/C++'a benzer bir syntax ile tasarladı ve böylece
programcılar için kolaylıkla öğrenilebilen bir dil oldu.

Java uygulamaları bilgisayar mimarisine bağlı olmadan herhangi bir Java Sanal Makinesi
(Java Virtual Machine - JVM) üzerinde çalışabilen tipik bytecode'dur (sınıf dosyası).

-------------------------------------------------------------------------------------------------

2)Anında Derleme

Java ilk çıktığında bytecode işletme hızı çok iyi değildi. 
Yerine göre sistemin öz yazılımlarından 5-10 kat yavaş çalışıyordu.
Bu nedenle bazı yazılım geliştirme şirketleri JIT yani "Just-in-time compilation",
"anında derleme" araçları üretmeye başladılar. 
Yapılan şey bytecode'u sanal makinenin kurulu olduğu gerçek
sistemin diline anında derleme yaparak dönüştürmesiydi.
Bu sayede verimde ciddi artışlar sağlandı. Ama 2000 yılından sonra geliştirilen 
sanal makinelerde (HotSpot gibi) JIT'in işlevi VM içinde yer almaya başlamış,
işlemci hızı ve bellek miktarının dramatik biçimde artması ile dış JIT yazılımları 
popülerliğini kaybetmiştir.
Bugün hâlen birkaç ürün (Excelsior JET gibi) pazarda bulunsa da genellikle 
bu yöndeki ihtiyaç azalmıştır.

-------------------------------------------------------------------------------------------------

3 ) java nasıl çalışır ?

Yazılımcı Java kodunu yazar.
Bu kod bir Java Compiler derleyicisi ile derlenir. 
derlenmeden önce dosya ismi .java uzantılı olur.
derlemeden sonra dosya ismi .class olur.
Derleme sonucunda "bytecode" adı verilen bir tür sanal makine kodu ortaya çıkar.
Düzlem bağımsızlığını sağlayan bytecode'dur. 
Çünkü bir kere bytecode oluştuktan sonra yazılım, 
sanal makine içeren tüm işletim sistemlerinde çalışabilmektedir.
Bu bytecode Java Sanal Makinesi (Java Virtual Machine - JVM) tarafından işletilir.
Bu aşama, her bir bytecode komutunun teker teker yorumlanması ile icra edilebileceği gibi,
anında derleme (Just-in-time compilation - JIT)kullanılarak da gerçekleştirilebilir.

--------------------------------------------------------------------------------------------------------
Derleyici ve yorumlayıcı

JAVA kodun iki adımlı yürütülmesine sahiptir, 
ilk adımda derlemeden geçer ve daha sonra platformdan bağımsız olan bayt kodu tercümanı 
veya JVM'ye gönderilen bayt kodu ile sonuçlanır

Derleyici Compiler :
- Kaynak kodun çalıştırılmadan önce makine koduna (Baytcode) cevrilmesi işlemidir.

yorumlayıcı (Interpreter) :
-Java sanal makinesi bayt kodunu yorumlar.

--------------------------------------------------------------------------------------------------------
jdk jre jvm Farkları Nedir



JVM(Java Virtual Machine)

Bir Java dosyası derlendiği(compile) zaman   .class  uzantılı java byte kodları oluşur.
JVM ise Java byte kodları tek tek yorumlar.

Bu sayede java kodları derlendikten sonra farklı işletim sistemlerinde sorunsuz olarak çalışır . 
JVM sayesinde Java da sıkça duyduğumuz ve Javayı Java yapan  "Write Once, Run Anywhere"  özelliğini 
kullanabilmekteyiz . Her işletim sisteminin kendi sanal makinası vardır.
--------------------------------------------------------------------------------------------------------
JRE(Java Runtime environment)

Bir Java uygulamasını çalıştırmak için gerekli olan Java kütüphanelerini ve JVM içerir

JRE = Java Kütüphaneleri + JVM

--------------------------------------------------------------------------------------------------------
JDK(Java Geliştirme Seti)

Java ile geliştirme yapmak için ve yazdığımız java kodlarını compile edip  
.class uzantılı dosyaları oluşturmamızı sağlayan tool dur.

JDK = JRE + derleyici + java Compiler 
--------------------------------------------------------------------------------------------------------